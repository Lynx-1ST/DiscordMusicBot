const { EmbedBuilder } = require("discord.js");
const Reconnect = require("../../../settings/models/247.js");

let disconnectTimeout; // Bi·∫øn l∆∞u tr·ªØ ƒë·ªëi t∆∞·ª£ng timeout

module.exports.run = async (client, player) => {
    const channel = client.channels.cache.get(player.textChannel);
    if (!channel) return;

    if (player.queue.length) return;

    if (player.message) await player.message.delete();

    // This will prevent the bot from being disconnected/destroyed when the queue ends if 247 is activated
    const data = await Reconnect.findOne({ guild: player.guildId });

    if (data && Date.now() >= data.time) {
        await data.delete();
    } // Disable this "if" when 247 command settings premium is set to "false".

    if (data) return;

    // Add a delay before disconnecting
    const disconnectDelay = 90000; // Delay in milliseconds (90 seconds in this example)

    const embed = new EmbedBuilder()
        .setDescription(`\`‚è≥\` | ƒêang ch·ªù ${disconnectDelay / 1000} gi√¢y tr∆∞·ªõc khi ng·∫Øt k·∫øt n·ªëi...`)
        .setColor(client.color);

    const waitingMessage = await channel.send({ embeds: [embed] });

    // Xo√° th√¥ng b√°o ch·ªù v√† reset timeout n·∫øu c√≥ s·ª± ki·ªán ti·∫øp t·ª•c ph√°t nh·∫°c ho·∫∑c th√™m b√†i h√°t m·ªõi
    const deleteWaitingMessage = () => {
        clearTimeout(disconnectTimeout);
        waitingMessage.delete().catch(console.error);
    };

    // Set timeout ƒë·ªÉ ng·∫Øt k·∫øt n·ªëi sau th·ªùi gian quy ƒë·ªãnh
    disconnectTimeout = setTimeout(async () => {
        await player.destroy();

        const finalEmbed = new EmbedBuilder()
            .setDescription(`\`üëã\` | ƒê√£ ng·∫Øt k·∫øt n·ªëi...!!! Do h√†ng ƒë·ª£i tr·ªëng. ƒêi·ªÅu n√†y c√≥ th·ªÉ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a b·∫±ng c√°ch s·ª≠ d·ª•ng l·ªánh \`247\`.`)
            .setColor(client.color);

        // Delete the waiting message after disconnecting
        await waitingMessage.delete();

        return channel.send({ embeds: [finalEmbed] });
    }, disconnectDelay);
};

// L·∫Øng nghe s·ª± ki·ªán khi c√≥ nh·∫°c ti·∫øp t·ª•c ph√°t
module.exports.listenToTrackStart = (client) => {
    client.on("trackStart", () => {
        deleteWaitingMessage(); // Xo√° th√¥ng b√°o ch·ªù
    });
};

// L·∫Øng nghe s·ª± ki·ªán khi ng∆∞·ªùi d√πng th√™m b√†i h√°t m·ªõi
module.exports.listenToTrackAdd = (client) => {
    client.on("trackAdd", () => {
        deleteWaitingMessage(); // Xo√° th√¥ng b√°o ch·ªù
    });
};
